[{"C:\\personal\\my-projects\\endless-tower\\src\\index.js":"1","C:\\personal\\my-projects\\endless-tower\\src\\App.js":"2","C:\\personal\\my-projects\\endless-tower\\src\\reportWebVitals.js":"3","C:\\personal\\my-projects\\endless-tower\\src\\components\\Intro.js":"4","C:\\personal\\my-projects\\endless-tower\\src\\components\\Game.js":"5","C:\\personal\\my-projects\\endless-tower\\src\\components\\Rules.js":"6","C:\\personal\\my-projects\\endless-tower\\src\\components\\EndGame.js":"7","C:\\personal\\my-projects\\endless-tower\\src\\components\\PlayerSkills.js":"8","C:\\personal\\my-projects\\endless-tower\\src\\components\\NextStage.js":"9","C:\\personal\\my-projects\\endless-tower\\src\\data\\monsters.js":"10","C:\\personal\\my-projects\\endless-tower\\src\\components\\PlayerAttributesStorage.js":"11"},{"size":532,"mtime":1609189239079,"results":"12","hashOfConfig":"13"},{"size":1003,"mtime":1609970888859,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":413,"mtime":1609189967500,"results":"16","hashOfConfig":"13"},{"size":8955,"mtime":1611438885151,"results":"17","hashOfConfig":"13"},{"size":1680,"mtime":1611009036780,"results":"18","hashOfConfig":"13"},{"size":113,"mtime":1609188751058,"results":"19","hashOfConfig":"13"},{"size":4426,"mtime":1611094298889,"results":"20","hashOfConfig":"13"},{"size":553,"mtime":1611432740581,"results":"21","hashOfConfig":"13"},{"size":1943,"mtime":1611438749555,"results":"22","hashOfConfig":"13"},{"size":403,"mtime":1609971674381,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1k1thib",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\personal\\my-projects\\endless-tower\\src\\index.js",[],["50","51"],"C:\\personal\\my-projects\\endless-tower\\src\\App.js",[],"C:\\personal\\my-projects\\endless-tower\\src\\reportWebVitals.js",[],"C:\\personal\\my-projects\\endless-tower\\src\\components\\Intro.js",[],"C:\\personal\\my-projects\\endless-tower\\src\\components\\Game.js",["52","53","54","55","56","57","58","59","60","61"],"import React, { useState, useEffect } from \"react\";\r\nimport Neptune from \"../assets/img/monstersAvatars/Neptune.png\";\r\nimport monsters from \"../data/monsters\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { PlayerAttributesStorage } from \"./PlayerAttributesStorage\";\r\n\r\nfunction Game() {\r\n  /*const playerInitialData = [\r\n    {\r\n      id: 1,\r\n      life: 100,\r\n      attack: 3,\r\n      speed: 1000,\r\n      dodge: 0,\r\n      accuracy: 0,\r\n      armor: 0,\r\n      vitality: 100,\r\n    },\r\n  ];*/\r\n\r\n  //Monster Attributes\r\n  const [monsterLvl] = useState(localStorage.getItem(\"monsterLvl\"));\r\n  const [monsterLife, setMonsterLife] = useState(monsters[monsterLvl].life);\r\n  const [monsterLifePercentage, setMonsterLifePercentage] = useState(100);\r\n  const [monsterDodge, setMonsterDodge] = useState(monsters[monsterLvl].dodge);\r\n  const [monsterSpeed, setMonsterSpeed] = useState(monsters[monsterLvl].speed);\r\n  const [monsteerDodgeChance, setMonsteerDodgeChance] = useState();\r\n  const [monsterAttack, setMonsterAttack] = useState(\r\n    monsters[monsterLvl].attack\r\n  );\r\n  const [monsterAttackAmount, setMonsterAttackAmount] = useState();\r\n  const [monsterArmor, setMonsterArmor] = useState(monsters[monsterLvl].armor);\r\n  const [monsterAccuracity, setMonsterAccuracity] = useState(\r\n    monsters[monsterLvl].accuracy\r\n  );\r\n\r\n  //Player Attributes\r\n  const [playerAttack, setPlayerAttack] = useState(\r\n    localStorage.getItem(\"attack\")\r\n  );\r\n  console.log(localStorage);\r\n  const [playerSpeed] = useState(localStorage.getItem(\"rawSpeed\"));\r\n  const [playerLife, setPlayerLife] = useState(localStorage.getItem(\"life\"));\r\n  const [playerArmor] = useState(localStorage.getItem(\"armor\"));\r\n  const [playerDodge] = useState(localStorage.getItem(\"dodge\"));\r\n  const [playerAccuracity] = useState(localStorage.getItem(\"accuracity\"));\r\n\r\n  const [playerLifePercentage, setPlayerLifePercentage] = useState(100);\r\n  const [playerAttackAmount, setPlayerAttackAmount] = useState();\r\n  const [playerDodgeChance, setPlayerDodgeChance] = useState();\r\n\r\n  //Start the Game\r\n  const [start, setStart] = useState(false);\r\n\r\n  //restore life to player\r\n  localStorage.setItem(\"life\", localStorage.getItem(\"vitality\") * 10);\r\n\r\n  let history = useHistory();\r\n\r\n  //Calculate monster doodge\r\n  const calculateMonsterDodgechance = () => {\r\n    let checkDifference;\r\n    if (playerAccuracity < monsterDodge) {\r\n      checkDifference = Math.abs(playerAccuracity - monsterDodge);\r\n    } else {\r\n      checkDifference = 1;\r\n    }\r\n    let dodgeChance = Math.floor(Math.random() * checkDifference);\r\n    setMonsteerDodgeChance(dodgeChance);\r\n  };\r\n  //Calculate player doodge\r\n  const calculatePlayerDodgechance = () => {\r\n    let checkDifferencePlayer;\r\n    if (monsterAccuracity < playerDodge) {\r\n      checkDifferencePlayer = Math.abs(monsterAccuracity - playerDodge);\r\n    } else {\r\n      checkDifferencePlayer = 1;\r\n    }\r\n    let dodgeChancePlayer = Math.floor(Math.random() * checkDifferencePlayer);\r\n    setPlayerDodgeChance(dodgeChancePlayer);\r\n  };\r\n\r\n  console.log(\"player\" + playerDodgeChance);\r\n  console.log(\"monster attack \" + monsterAttack);\r\n  console.log(\"player doodge\" + playerDodgeChance);\r\n  console.log(\"player life\" + playerLife);\r\n\r\n  //Calculate damage to monster\r\n  useEffect(() => {\r\n    if (start) {\r\n      const interval = setInterval(\r\n        () => {\r\n          calculateMonsterDodgechance();\r\n\r\n          //monster doodge change calc\r\n          if (monsteerDodgeChance === 0) {\r\n            //monster armor calc\r\n            let armorCalc = Math.abs(\r\n              monsterArmor >= playerAttack ? 1 : monsterArmor - playerAttack\r\n            );\r\n\r\n            setMonsterLife((monsterLife) => monsterLife - armorCalc);\r\n            //calc life percentage\r\n            let calcPercPlayerAttack = (playerAttack / monsterLife) * 100;\r\n            setMonsterLifePercentage(\r\n              (monsterLifePercentage) =>\r\n                monsterLifePercentage - calcPercPlayerAttack\r\n            );\r\n            setPlayerAttackAmount(armorCalc);\r\n          }\r\n        },\r\n        monsterLife > 0 ? playerSpeed : null\r\n      );\r\n      return () => clearInterval(interval);\r\n    } else {\r\n    }\r\n  }, [start, monsteerDodgeChance, monsterArmor]);\r\n\r\n  //Calculate damage to player\r\n  useEffect(() => {\r\n    if (start) {\r\n      const interval = setInterval(() => {\r\n        calculatePlayerDodgechance();\r\n        //player doodge change calc\r\n        if (playerDodgeChance === 0) {\r\n          //player armor calc\r\n          let playerArmorCalc = Math.abs(\r\n            playerArmor >= monsterAttack ? 1 : playerArmor - monsterAttack\r\n          );\r\n          setPlayerLife((playerLife) => playerLife - playerArmorCalc);\r\n          //calc life percentage\r\n          let calcPerMonsterAttack = (monsterAttack / playerLife) * 100;\r\n          setPlayerLifePercentage(\r\n            (playerLifePercentage) =>\r\n              playerLifePercentage - calcPerMonsterAttack\r\n          );\r\n          setMonsterAttackAmount(playerArmorCalc);\r\n        }\r\n      }, monsterSpeed);\r\n      return () => clearInterval(interval);\r\n    } else {\r\n    }\r\n  }, [start, playerDodgeChance, playerArmor]);\r\n\r\n  //Stop Interval\r\n  useEffect(() => {\r\n    if (monsterLife < 0 || playerLife < 0) {\r\n      setStart(false);\r\n    }\r\n  });\r\n\r\n  console.log(monsterLifePercentage);\r\n\r\n  function goToNextFloor() {\r\n    history.push(\"/playerskills\");\r\n    localStorage.setItem(\"availableSkills\", \"3\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"fractalMonster\">\r\n        <div className=\"monsterAvatar\">\r\n          <img\r\n            src={Neptune}\r\n            className={monsterLife < 0 ? \"defeated\" : \"\"}\r\n            alt=\"\"\r\n          />\r\n          <div\r\n            className={`playerAttackAmount ${\r\n              monsterLife < 0 || playerLife < 0 ? \"opacityNone\" : \"\"\r\n            }${monsteerDodgeChance > 0 ? \"backBlue\" : \"backRed\"} ${\r\n              start ? \"addDamageAnimation\" : \"\"\r\n            }`}\r\n            style={{ animationDuration: `${playerSpeed * 0.001}s` }}\r\n          >\r\n            {monsteerDodgeChance === 0\r\n              ? playerAttackAmount\r\n                ? \"-\" + playerAttackAmount\r\n                : \"\"\r\n              : monsteerDodgeChance > 0\r\n              ? \"miss\"\r\n              : \"\"}\r\n          </div>\r\n          <div\r\n            className={`deadStateBannerMonster ${\r\n              monsterLife > 0 ? \"displayNone\" : \"\"\r\n            }`}\r\n          >\r\n            DEFEATED\r\n          </div>\r\n        </div>\r\n        <div className=\"innerMonsterLifebar\">\r\n          <div\r\n            className=\"monsterLifebar\"\r\n            style={{\r\n              width: (monsterLife > 0 ? monsterLifePercentage : 0) + \"%\",\r\n            }}\r\n          ></div>\r\n        </div>\r\n        <p>{monsterLife > 0 ? monsterLife : 0}</p>\r\n      </div>\r\n      <div\r\n        className={`startButton  ${\r\n          start || monsterLife <= 0 || playerLife <= 0 ? \"displayNone\" : \"\"\r\n        }`}\r\n      >\r\n        <button onClick={() => setStart(true)}>start</button>\r\n      </div>\r\n      <div\r\n        className={`playerDefeated ${\r\n          playerLife <= 0 ? \"displayEndButton\" : \"displayNone\"\r\n        }`}\r\n      >\r\n        <p>You lost!</p>\r\n        <button onClick={() => setStart(true)}>End Game</button>\r\n      </div>\r\n      <div\r\n        className={`playerDefeated ${\r\n          monsterLife <= 0 ? \"displayEndButton\" : \"displayNone\"\r\n        }`}\r\n      >\r\n        <p>Victory!</p>\r\n        <button onClick={() => goToNextFloor()}>Next</button>\r\n      </div>\r\n      <div className=\"player\">\r\n        <div className=\"playerAvatar\">\r\n          <img\r\n            src={Neptune}\r\n            alt=\"\"\r\n            className={playerLife < 0 ? \"defeated\" : \"\"}\r\n          />\r\n          <div\r\n            className={`monsterAttackAmount ${\r\n              monsterLife < 0 || playerLife < 0 ? \"opacityNone\" : \"\"\r\n            } ${playerDodgeChance > 0 ? \"backBlue\" : \"backRed\"}  ${\r\n              start ? \"addDamageAnimation\" : \"\"\r\n            }`}\r\n            style={{ animationDuration: `${monsterSpeed * 0.001}s` }}\r\n          >\r\n            {playerDodgeChance === 0 && playerAttackAmount !== \"undefined\"\r\n              ? monsterAttackAmount\r\n                ? \"-\" + monsterAttackAmount\r\n                : \"\"\r\n              : playerDodgeChance > 0\r\n              ? \"miss\"\r\n              : \"\"}\r\n          </div>\r\n          <div\r\n            className={`deadStateBannerPlayer ${\r\n              playerLife > 0 ? \"displayNone\" : \"\"\r\n            }`}\r\n          >\r\n            DEFEATED\r\n          </div>\r\n        </div>\r\n        <div className=\"innerPlayerLifebar\">\r\n          <div\r\n            className=\"playerLifebar\"\r\n            style={{\r\n              width: (playerLife > 0 ? playerLifePercentage : 0) + \"%\",\r\n            }}\r\n          ></div>\r\n        </div>\r\n        <p>{playerLife > 0 ? playerLife : 0}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","C:\\personal\\my-projects\\endless-tower\\src\\components\\Rules.js",[],"C:\\personal\\my-projects\\endless-tower\\src\\components\\EndGame.js",[],"C:\\personal\\my-projects\\endless-tower\\src\\components\\PlayerSkills.js",["62","63","64"],"import React, { useState, useEffect } from \"react\";\r\nimport { PlayerAttributesStorage } from \"./PlayerAttributesStorage\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction PlayerSkills() {\r\n  let history = useHistory();\r\n  const [playerAttack, setPlayerAttack] = PlayerAttributesStorage(\r\n    \"attack\",\r\n    localStorage.getItem(\"attack\")\r\n  );\r\n  const [playerAgility, setPlayerAgility] = PlayerAttributesStorage(\r\n    \"agility\",\r\n    localStorage.getItem(\"agility\")\r\n  );\r\n  const [playerDodge, setPlayerDodge] = PlayerAttributesStorage(\r\n    \"dodge\",\r\n    localStorage.getItem(\"dodge\")\r\n  );\r\n  const [playerVitality, setPlayerVitality] = PlayerAttributesStorage(\r\n    \"vitality\",\r\n    localStorage.getItem(\"vitality\")\r\n  );\r\n  const [playerRawSpeed, setPlayerRawSpeed] = PlayerAttributesStorage(\r\n    \"rawSpeed\",\r\n    localStorage.getItem(\"rawSpeed\")\r\n  );\r\n  const [playerSpeed, setPlayerSpeed] = PlayerAttributesStorage(\r\n    \"speed\",\r\n    localStorage.getItem(\"speed\")\r\n  );\r\n  const [playerAccuracity, setPlayerAccuracity] = PlayerAttributesStorage(\r\n    \"accuracity\",\r\n    localStorage.getItem(\"accuracity\")\r\n  );\r\n  const [playerArmor, setPlayerArmor] = PlayerAttributesStorage(\r\n    \"armor\",\r\n    localStorage.getItem(\"armor\")\r\n  );\r\n  const [availableSkills, setAvailableSkills] = PlayerAttributesStorage(\r\n    \"availableSkills\",\r\n    localStorage.getItem(\"availableSkills\")\r\n  );\r\n  const [monsterLvl, setMonsterLvl] = PlayerAttributesStorage(\r\n    \"monsterLvl\",\r\n    localStorage.getItem(\"monsterLvl\")\r\n  );\r\n  const [nextStageDelay, setNextStageDelay] = useState(false);\r\n  console.log(localStorage);\r\n\r\n  const handleAttack = () => {\r\n    if (availableSkills > 0) {\r\n      setPlayerAttack(parseInt(playerAttack) + 1);\r\n      setAvailableSkills(parseInt(availableSkills) - 1);\r\n    }\r\n  };\r\n\r\n  const handleLife = () => {\r\n    if (availableSkills > 0) {\r\n      setPlayerVitality(parseInt(playerVitality) + 1);\r\n      setAvailableSkills(parseInt(availableSkills) - 1);\r\n    }\r\n  };\r\n\r\n  const handleAgility = () => {\r\n    if (availableSkills > 0) {\r\n      setPlayerAgility(parseInt(playerAgility) + 1);\r\n      setPlayerDodge(parseInt(playerDodge) + 1);\r\n      setAvailableSkills(parseInt(availableSkills) - 1);\r\n    }\r\n  };\r\n\r\n  const handleSpeed = () => {\r\n    if (availableSkills > 0) {\r\n      setPlayerSpeed(parseInt(playerSpeed) + 1);\r\n      setPlayerRawSpeed(parseInt(playerRawSpeed) - 20);\r\n      setAvailableSkills(parseInt(availableSkills) - 1);\r\n    }\r\n  };\r\n\r\n  const handleAccuracity = () => {\r\n    if (availableSkills > 0) {\r\n      setPlayerAccuracity(parseInt(playerAccuracity) + 1);\r\n      setAvailableSkills(parseInt(availableSkills) - 1);\r\n    }\r\n  };\r\n\r\n  const handleArmor = () => {\r\n    if (availableSkills > 0) {\r\n      setPlayerArmor(parseInt(playerArmor) + 1);\r\n      setAvailableSkills(parseInt(availableSkills) - 1);\r\n    }\r\n  };\r\n\r\n  const goNextStage = () => {\r\n    setMonsterLvl(parseInt(monsterLvl) + 1);\r\n    setTimeout(() => {\r\n      history.push(\"/nextstage\");\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <div className=\"PlayerSkills\">\r\n      <div>\r\n        <p>You gain a New Level!</p>\r\n        <p>You have {availableSkills} skills avaliable </p>\r\n        <div>\r\n          <div>\r\n            <span>Strength: </span>\r\n            <span> {playerAttack}</span>\r\n            <button onClick={() => handleAttack()}>+</button>\r\n          </div>\r\n          <div>\r\n            <span>Vitality: </span>\r\n            <span>{playerVitality}</span>\r\n            <button onClick={() => handleLife()}>+</button>\r\n          </div>\r\n          <div>\r\n            <span>Agility: </span>\r\n            <span>{playerAgility}</span>\r\n            <button onClick={() => handleAgility()}>+</button>\r\n          </div>\r\n          <div>\r\n            <span>Speed: </span>\r\n            <span> {playerSpeed}</span>\r\n            <button onClick={() => handleSpeed()}>+</button>\r\n          </div>\r\n          <div>\r\n            <span>Accuracity: </span>\r\n            <span>{playerAccuracity}</span>\r\n            <button onClick={() => handleAccuracity()}>+</button>\r\n          </div>\r\n          <div>\r\n            <span>Armor: </span>\r\n            <span>{playerArmor}</span>\r\n            <button onClick={() => handleArmor()}>+</button>\r\n          </div>\r\n          <button onClick={() => goNextStage()}>next stage</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PlayerSkills;\r\n","C:\\personal\\my-projects\\endless-tower\\src\\components\\NextStage.js",["65","66"],"import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction NextStage() {\r\n  const [stageFloor, setStageFloor] = useState(\r\n    parseInt(localStorage.getItem(\"monsterLvl\")) + 1\r\n  );\r\n  let history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      history.push(\"/game\");\r\n    }, 5000);\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"NextStage\">\r\n      <p>Stage {stageFloor}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NextStage;\r\n","C:\\personal\\my-projects\\endless-tower\\src\\data\\monsters.js",[],"C:\\personal\\my-projects\\endless-tower\\src\\components\\PlayerAttributesStorage.js",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":5,"column":10,"nodeType":"73","messageId":"74","endLine":5,"endColumn":33},{"ruleId":"71","severity":1,"message":"75","line":25,"column":24,"nodeType":"73","messageId":"74","endLine":25,"endColumn":39},{"ruleId":"71","severity":1,"message":"76","line":26,"column":24,"nodeType":"73","messageId":"74","endLine":26,"endColumn":39},{"ruleId":"71","severity":1,"message":"77","line":28,"column":25,"nodeType":"73","messageId":"74","endLine":28,"endColumn":41},{"ruleId":"71","severity":1,"message":"78","line":32,"column":24,"nodeType":"73","messageId":"74","endLine":32,"endColumn":39},{"ruleId":"71","severity":1,"message":"79","line":33,"column":29,"nodeType":"73","messageId":"74","endLine":33,"endColumn":49},{"ruleId":"71","severity":1,"message":"80","line":38,"column":24,"nodeType":"73","messageId":"74","endLine":38,"endColumn":39},{"ruleId":"81","severity":1,"message":"82","line":117,"column":6,"nodeType":"83","endLine":117,"endColumn":48,"suggestions":"84"},{"ruleId":"81","severity":1,"message":"85","line":143,"column":6,"nodeType":"83","endLine":143,"endColumn":45,"suggestions":"86"},{"ruleId":"81","severity":1,"message":"87","line":146,"column":3,"nodeType":"73","endLine":146,"endColumn":12,"suggestions":"88"},{"ruleId":"71","severity":1,"message":"89","line":1,"column":27,"nodeType":"73","messageId":"74","endLine":1,"endColumn":36},{"ruleId":"71","severity":1,"message":"90","line":47,"column":10,"nodeType":"73","messageId":"74","endLine":47,"endColumn":24},{"ruleId":"71","severity":1,"message":"91","line":47,"column":26,"nodeType":"73","messageId":"74","endLine":47,"endColumn":43},{"ruleId":"71","severity":1,"message":"92","line":5,"column":22,"nodeType":"73","messageId":"74","endLine":5,"endColumn":35},{"ruleId":"81","severity":1,"message":"93","line":15,"column":6,"nodeType":"83","endLine":15,"endColumn":8,"suggestions":"94"},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"no-unused-vars","'PlayerAttributesStorage' is defined but never used.","Identifier","unusedVar","'setMonsterDodge' is assigned a value but never used.","'setMonsterSpeed' is assigned a value but never used.","'setMonsterAttack' is assigned a value but never used.","'setMonsterArmor' is assigned a value but never used.","'setMonsterAccuracity' is assigned a value but never used.","'setPlayerAttack' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'calculateMonsterDodgechance', 'monsterLife', 'playerAttack', and 'playerSpeed'. Either include them or remove the dependency array.","ArrayExpression",["97"],"React Hook useEffect has missing dependencies: 'calculatePlayerDodgechance', 'monsterAttack', 'monsterSpeed', and 'playerLife'. Either include them or remove the dependency array.",["98"],"React Hook useEffect contains a call to 'setStart'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [monsterLife, playerLife] as a second argument to the useEffect Hook.",["99"],"'useEffect' is defined but never used.","'nextStageDelay' is assigned a value but never used.","'setNextStageDelay' is assigned a value but never used.","'setStageFloor' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["100"],"no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},"Update the dependencies array to be: [start, monsteerDodgeChance, monsterArmor, monsterLife, playerSpeed, calculateMonsterDodgechance, playerAttack]",{"range":"109","text":"110"},"Update the dependencies array to be: [start, playerDodgeChance, playerArmor, monsterSpeed, calculatePlayerDodgechance, monsterAttack, playerLife]",{"range":"111","text":"112"},"Add dependencies array: [monsterLife, playerLife]",{"range":"113","text":"114"},"Update the dependencies array to be: [history]",{"range":"115","text":"116"},[4204,4246],"[start, monsteerDodgeChance, monsterArmor, monsterLife, playerSpeed, calculateMonsterDodgechance, playerAttack]",[5134,5173],"[start, playerDodgeChance, playerArmor, monsterSpeed, calculatePlayerDodgechance, monsterAttack, playerLife]",[5299,5299],", [monsterLife, playerLife]",[417,419],"[history]"]