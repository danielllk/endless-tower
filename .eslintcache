[{"C:\\personal\\my-projects\\endless-tower\\src\\index.js":"1","C:\\personal\\my-projects\\endless-tower\\src\\App.js":"2","C:\\personal\\my-projects\\endless-tower\\src\\reportWebVitals.js":"3","C:\\personal\\my-projects\\endless-tower\\src\\components\\Intro.js":"4","C:\\personal\\my-projects\\endless-tower\\src\\components\\Game.js":"5","C:\\personal\\my-projects\\endless-tower\\src\\components\\Rules.js":"6","C:\\personal\\my-projects\\endless-tower\\src\\components\\EndGame.js":"7","C:\\personal\\my-projects\\endless-tower\\src\\components\\PlayerSkills.js":"8","C:\\personal\\my-projects\\endless-tower\\src\\components\\NextStage.js":"9","C:\\personal\\my-projects\\endless-tower\\src\\data\\monsters.js":"10","C:\\personal\\my-projects\\endless-tower\\src\\components\\PlayerAttributesStorage.js":"11"},{"size":532,"mtime":1611608880737,"results":"12","hashOfConfig":"13"},{"size":1003,"mtime":1611608880706,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1611608880759,"results":"15","hashOfConfig":"13"},{"size":566,"mtime":1612023236733,"results":"16","hashOfConfig":"13"},{"size":8710,"mtime":1612473374396,"results":"17","hashOfConfig":"13"},{"size":5799,"mtime":1612213373894,"results":"18","hashOfConfig":"13"},{"size":106,"mtime":1611608880857,"results":"19","hashOfConfig":"13"},{"size":6312,"mtime":1612097561048,"results":"20","hashOfConfig":"13"},{"size":529,"mtime":1611877452449,"results":"21","hashOfConfig":"13"},{"size":3214,"mtime":1612474496613,"results":"22","hashOfConfig":"13"},{"size":390,"mtime":1611608880891,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1k1thib",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\personal\\my-projects\\endless-tower\\src\\index.js",[],["50","51"],"C:\\personal\\my-projects\\endless-tower\\src\\App.js",[],"C:\\personal\\my-projects\\endless-tower\\src\\reportWebVitals.js",[],"C:\\personal\\my-projects\\endless-tower\\src\\components\\Intro.js",[],"C:\\personal\\my-projects\\endless-tower\\src\\components\\Game.js",["52","53","54","55","56","57","58","59","60","61","62"],"C:\\personal\\my-projects\\endless-tower\\src\\components\\Rules.js",["63","64"],"import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction Rules() {\n  let history = useHistory();\n\n  const initialPlayerSkills = () => {\n    localStorage.setItem(\"monsterLvl\", \"0\");\n    localStorage.setItem(\"attack\", \"2\");\n    localStorage.setItem(\"rawSpeed\", \"1000\");\n    localStorage.setItem(\"speed\", \"10\");\n    localStorage.setItem(\"life\", \"100\");\n    localStorage.setItem(\"armor\", \"0\");\n    localStorage.setItem(\"dodge\", \"0\");\n    localStorage.setItem(\"accuracy\", \"0\");\n    localStorage.setItem(\"vitality\", \"10\");\n    localStorage.setItem(\"agility\", \"0\");\n  };\n\n  const [openGameplay, setOpenGameplay] = useState(false);\n  const [openSkills, setOpenSkills] = useState(false);\n  const [openAbout, setOpenAbout] = useState(false);\n\n  const goToGame = () => {\n    history.push(\"/game\");\n    initialPlayerSkills();\n  };\n\n  const openRules = (event) => {\n    switch (event.target.className) {\n      case \"btn-rules\":\n        setOpenGameplay(!openGameplay);\n        break;\n      case \"btn-skills\":\n        setOpenSkills(!openSkills);\n        break;\n      case \"btn-about\":\n        setOpenAbout(!openAbout);\n        break;\n      default:\n    }\n  };\n  return (\n    <div\n      className=\"rules\"\n      style={{ height: openGameplay || openSkills || openAbout ? \"100%\" : \"\" }}\n    >\n      <div className=\"rules-box\">\n        <h1>Introduction</h1>\n        <p>\n          Endless Tower Of Fracta is a simple idle rpg. Please read the rules\n          below.\n        </p>\n        <div className=\"rules-accordeon\">\n          <div>\n            <div\n              className=\"btn-rules\"\n              onClick={openRules}\n              style={{ backgroundColor: openGameplay ? \"#262626\" : \"\" }}\n            >\n              Gameplay <span>{openGameplay ? \"-\" : \"+\"}</span>\n            </div>\n            <p className={`rules-text ${openGameplay ? \"\" : \"display-none\"}`}>\n              After pressing the start button you will be transferred to the\n              game screen. To start the fight press the \"Fight\" button. Each\n              second the game will compare your stats with the stats of the\n              enemy and show the result ( the speed can be changed through the\n              stats ). If your health goes to 0 - you will lose. If the health\n              of the enemy goes to 0 - you will win and move to the next screen.\n              On the next screen, you will be asked to Lvl up your skills. The\n              idea is to create a well-balanced character, who can fight against\n              any enemy. Aftherwards you will be moved to the next stage, and\n              the process repeats. \n            </p>\n          </div>\n          <div>\n            <div\n              className=\"btn-skills\"\n              onClick={openRules}\n              style={{ backgroundColor: openSkills ? \"#262626\" : \"\" }}\n            >\n              Skills <span>{openSkills ? \"-\" : \"+\"}</span>\n            </div>\n            <p className={`rules-text ${openSkills ? \"\" : \"display-none\"}`}>\n              <strong>Strength</strong> <br />\n              Affects your damage to the enemy. Each skill point will give you 1\n              strength. <br />\n              <strong>Vitality</strong>\n              <br /> The amount of life you have. Each skill point will give you\n              10 lifes. \n              <br />\n              <strong>Agility</strong>\n              <br /> The dodge chance. Each skill point will give 1 dodge\n              chance.\n              <br />\n              <strong>Speed</strong>\n              <br /> The frequency with which you attack. You will start with\n              the frequency of 1000 milliseconds ( 1 second ). Each point will\n              reduce it by 20 milliseconds. You can only invest 45 points in\n              this skill.\n              <br />\n              <strong>Accuracy</strong>\n              <br />\n              Counter the Agility skill. It will reduce the amount of dodge of\n              the opponent. If the opponent doesn't have any dodge this skill\n              will be ignored.\n              <br />\n              <strong>Armor</strong>\n              <br />\n              Counter the Strength skill. It will compare the strength of the\n              enemy with your armor and reduce the amount of damage you receive.\n              You can't receive 0 damage, even if you have more armor. The\n              minimum damage received is always 1. \n            </p>\n          </div>\n          <div>\n            <div\n              className=\"btn-about\"\n              onClick={openRules}\n              style={{ backgroundColor: openAbout ? \"#262626\" : \"\" }}\n            >\n              About <span>{openAbout ? \"-\" : \"+\"}</span>\n            </div>\n            <p className={`rules-text ${openAbout ? \"\" : \"display-none\"}`}>\n              Hi! My name is Daniel, I am front end developer, musician and\n              abstract artist. Endless Tower Of Fracta is a simple IDLE RPG\n              where you watch numbers go down and try to climb to the highest\n              floor.\n              <p>\n                If you are interested in fractals which I used in this project\n                you can check my website\n                <a href=\"https://fractaart.com\" target=\"_blank\">\n                  here\n                </a>\n                .\n              </p>\n              <p>\n                You can also contact me if you need any info or just want to\n                talk:{\" \"}\n                <a href=\"mailto:daniel@fractaart.com\" target=\"_blank\">\n                  daniel@fractaart.com\n                </a>\n              </p>\n            </p>\n          </div>\n        </div>\n        <button type=\"button\" onClick={goToGame}>\n          Start\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Rules;\n","C:\\personal\\my-projects\\endless-tower\\src\\components\\EndGame.js",[],"C:\\personal\\my-projects\\endless-tower\\src\\components\\PlayerSkills.js",["65","66","67"],"import React, { useState, useEffect } from \"react\";\nimport { PlayerAttributesStorage } from \"./PlayerAttributesStorage\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction PlayerSkills() {\n  let history = useHistory();\n  const [playerAttack, setPlayerAttack] = PlayerAttributesStorage(\n    \"attack\",\n    localStorage.getItem(\"attack\")\n  );\n  const [playerAgility, setPlayerAgility] = PlayerAttributesStorage(\n    \"agility\",\n    localStorage.getItem(\"agility\")\n  );\n  const [playerDodge, setPlayerDodge] = PlayerAttributesStorage(\n    \"dodge\",\n    localStorage.getItem(\"dodge\")\n  );\n  const [playerVitality, setPlayerVitality] = PlayerAttributesStorage(\n    \"vitality\",\n    localStorage.getItem(\"vitality\")\n  );\n  const [playerRawSpeed, setPlayerRawSpeed] = PlayerAttributesStorage(\n    \"rawSpeed\",\n    localStorage.getItem(\"rawSpeed\")\n  );\n  const [playerSpeed, setPlayerSpeed] = PlayerAttributesStorage(\n    \"speed\",\n    localStorage.getItem(\"speed\")\n  );\n  const [playerAccuracy, setPlayerAccuracy] = PlayerAttributesStorage(\n    \"Accuracy\",\n    localStorage.getItem(\"Accuracy\")\n  );\n  const [playerArmor, setPlayerArmor] = PlayerAttributesStorage(\n    \"armor\",\n    localStorage.getItem(\"armor\")\n  );\n  const [availableSkills, setAvailableSkills] = PlayerAttributesStorage(\n    \"availableSkills\",\n    localStorage.getItem(\"availableSkills\")\n  );\n  const [monsterLvl, setMonsterLvl] = PlayerAttributesStorage(\n    \"monsterLvl\",\n    localStorage.getItem(\"monsterLvl\")\n  );\n  const [nextStageDelay, setNextStageDelay] = useState(false);\n  console.log(localStorage);\n\n  const handleAttack = () => {\n    if (availableSkills > 0) {\n      setPlayerAttack(parseInt(playerAttack) + 1);\n      setAvailableSkills(parseInt(availableSkills) - 1);\n    }\n  };\n\n  const handleAttackReturn = () => {\n    if (availableSkills < 3 && availableSkills >= 0) {\n      if (playerAttack > 2) {\n        setPlayerAttack(parseInt(playerAttack) - 1);\n        setAvailableSkills(parseInt(availableSkills) + 1);\n      }\n    }\n  };\n\n  const handleLife = () => {\n    if (availableSkills > 0) {\n      setPlayerVitality(parseInt(playerVitality) + 1);\n      setAvailableSkills(parseInt(availableSkills) - 1);\n    }\n  };\n\n  const handleLifeReturn = () => {\n    if (availableSkills < 3 && availableSkills >= 0) {\n      if (playerVitality > 10) {\n        setPlayerVitality(parseInt(playerVitality) - 1);\n        setAvailableSkills(parseInt(availableSkills) + 1);\n      }\n    }\n  };\n\n  const handleAgility = () => {\n    if (availableSkills > 0) {\n      setPlayerAgility(parseInt(playerAgility) + 1);\n      setPlayerDodge(parseInt(playerDodge) + 1);\n      setAvailableSkills(parseInt(availableSkills) - 1);\n    }\n  };\n\n  const handleAgilityReturn = () => {\n    if (availableSkills < 3 && availableSkills >= 0) {\n      if (playerAgility > 0) {\n        setPlayerAgility(parseInt(playerAgility) - 1);\n        setPlayerDodge(parseInt(playerDodge) - 1);\n        setAvailableSkills(parseInt(availableSkills) + 1);\n      }\n    }\n  };\n\n  const handleSpeed = () => {\n    if (availableSkills > 0) {\n      setPlayerSpeed(parseInt(playerSpeed) + 1);\n      setPlayerRawSpeed(parseInt(playerRawSpeed) - 20);\n      setAvailableSkills(parseInt(availableSkills) - 1);\n    }\n  };\n\n  const handleSpeedReturn = () => {\n    if (availableSkills <= 3 && availableSkills >= 0) {\n      if (playerSpeed > 10) {\n        setPlayerSpeed(parseInt(playerSpeed) - 1);\n        setPlayerRawSpeed(parseInt(playerRawSpeed) + 20);\n        setAvailableSkills(parseInt(availableSkills) + 1);\n      }\n    }\n  };\n\n  const handleAccuracy = () => {\n    if (availableSkills > 0) {\n      setPlayerAccuracy(parseInt(playerAccuracy) + 1);\n      setAvailableSkills(parseInt(availableSkills) - 1);\n    }\n  };\n\n  const handleAccuracyReturn = () => {\n    if (availableSkills < 3 && availableSkills >= 0) {\n      if (playerAccuracy > 0) {\n        setPlayerAccuracy(parseInt(playerAccuracy) - 1);\n        setAvailableSkills(parseInt(availableSkills) + 1);\n      }\n    }\n  };\n\n  const handleArmor = () => {\n    if (availableSkills > 0) {\n      setPlayerArmor(parseInt(playerArmor) + 1);\n      setAvailableSkills(parseInt(availableSkills) - 1);\n    }\n  };\n\n  const handleArmorReturn = () => {\n    if (availableSkills < 3 && availableSkills >= 0) {\n      if (playerArmor > 0) {\n        setPlayerArmor(parseInt(playerArmor) - 1);\n        setAvailableSkills(parseInt(availableSkills) + 1);\n      }\n    }\n  };\n\n  const goNextStage = () => {\n    setMonsterLvl(parseInt(monsterLvl) + 1);\n    setTimeout(() => {\n      history.push(\"/nextstage\");\n    }, 100);\n  };\n\n  return (\n    <div className=\"PlayerSkills\">\n      <div>\n        <p>You gain a New Level!</p>\n        <p>You have {availableSkills} skills avaliable </p>\n        <div>\n          <div>\n            <span>Strength: </span>\n            <span> {playerAttack}</span>\n            <button onClick={() => handleAttackReturn()}>-</button>\n            <button onClick={() => handleAttack()}>+</button>\n          </div>\n          <div>\n            <span>Vitality: </span>\n            <span>{playerVitality}</span>\n            <button onClick={() => handleLifeReturn()}>-</button>\n            <button onClick={() => handleLife()}>+</button>\n          </div>\n          <div>\n            <span>Agility: </span>\n            <span>{playerAgility}</span>\n            <button onClick={() => handleAgilityReturn()}>-</button>\n            <button onClick={() => handleAgility()}>+</button>\n          </div>\n          <div>\n            <span>Speed: </span>\n            <span> {playerSpeed}</span>\n            <button onClick={() => handleSpeedReturn()}>-</button>\n            <button onClick={() => handleSpeed()}>+</button>\n          </div>\n          <div>\n            <span>Accuracy: </span>\n            <span>{playerAccuracy}</span>\n            <button onClick={() => handleAccuracyReturn()}>-</button>\n            <button onClick={() => handleAccuracy()}>+</button>\n          </div>\n          <div>\n            <span>Armor: </span>\n            <span>{playerArmor}</span>\n            <button onClick={() => handleArmorReturn()}>-</button>\n            <button onClick={() => handleArmor()}>+</button>\n          </div>\n          <button onClick={() => goNextStage()}>next stage</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default PlayerSkills;\n","C:\\personal\\my-projects\\endless-tower\\src\\components\\NextStage.js",["68","69"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction NextStage() {\n  const [stageFloor, setStageFloor] = useState(\n    parseInt(localStorage.getItem(\"monsterLvl\")) + 1\n  );\n  let history = useHistory();\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      history.push(\"/game\");\n    }, 3000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <div className=\"NextStage\">\n      <p>Stage {stageFloor}</p>\n    </div>\n  );\n}\n\nexport default NextStage;\n","C:\\personal\\my-projects\\endless-tower\\src\\data\\monsters.js",[],"C:\\personal\\my-projects\\endless-tower\\src\\components\\PlayerAttributesStorage.js",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":5,"column":10,"nodeType":"76","messageId":"77","endLine":5,"endColumn":33},{"ruleId":"74","severity":1,"message":"78","line":12,"column":24,"nodeType":"76","messageId":"77","endLine":12,"endColumn":39},{"ruleId":"74","severity":1,"message":"79","line":13,"column":24,"nodeType":"76","messageId":"77","endLine":13,"endColumn":39},{"ruleId":"74","severity":1,"message":"80","line":14,"column":23,"nodeType":"76","messageId":"77","endLine":14,"endColumn":37},{"ruleId":"74","severity":1,"message":"81","line":16,"column":25,"nodeType":"76","messageId":"77","endLine":16,"endColumn":41},{"ruleId":"74","severity":1,"message":"82","line":20,"column":24,"nodeType":"76","messageId":"77","endLine":20,"endColumn":39},{"ruleId":"74","severity":1,"message":"83","line":21,"column":27,"nodeType":"76","messageId":"77","endLine":21,"endColumn":45},{"ruleId":"74","severity":1,"message":"84","line":26,"column":24,"nodeType":"76","messageId":"77","endLine":26,"endColumn":39},{"ruleId":"85","severity":1,"message":"86","line":105,"column":6,"nodeType":"87","endLine":105,"endColumn":48,"suggestions":"88"},{"ruleId":"85","severity":1,"message":"89","line":131,"column":6,"nodeType":"87","endLine":131,"endColumn":45,"suggestions":"90"},{"ruleId":"85","severity":1,"message":"91","line":134,"column":3,"nodeType":"76","endLine":134,"endColumn":12,"suggestions":"92"},{"ruleId":"93","severity":1,"message":"94","line":132,"column":49,"nodeType":"95","endLine":132,"endColumn":64},{"ruleId":"93","severity":1,"message":"94","line":140,"column":55,"nodeType":"95","endLine":140,"endColumn":70},{"ruleId":"74","severity":1,"message":"96","line":1,"column":27,"nodeType":"76","messageId":"77","endLine":1,"endColumn":36},{"ruleId":"74","severity":1,"message":"97","line":47,"column":10,"nodeType":"76","messageId":"77","endLine":47,"endColumn":24},{"ruleId":"74","severity":1,"message":"98","line":47,"column":26,"nodeType":"76","messageId":"77","endLine":47,"endColumn":43},{"ruleId":"74","severity":1,"message":"99","line":5,"column":22,"nodeType":"76","messageId":"77","endLine":5,"endColumn":35},{"ruleId":"85","severity":1,"message":"100","line":15,"column":6,"nodeType":"87","endLine":15,"endColumn":8,"suggestions":"101"},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"no-unused-vars","'PlayerAttributesStorage' is defined but never used.","Identifier","unusedVar","'setMonsterDodge' is assigned a value but never used.","'setMonsterSpeed' is assigned a value but never used.","'setMonsterName' is assigned a value but never used.","'setMonsterAttack' is assigned a value but never used.","'setMonsterArmor' is assigned a value but never used.","'setMonsterAccuracy' is assigned a value but never used.","'setPlayerAttack' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'calculateMonsterDodgechance', 'monsterLife', 'playerAttack', and 'playerSpeed'. Either include them or remove the dependency array.","ArrayExpression",["104"],"React Hook useEffect has missing dependencies: 'calculatePlayerDodgechance', 'monsterAttack', 'monsterSpeed', and 'playerLife'. Either include them or remove the dependency array.",["105"],"React Hook useEffect contains a call to 'setStart'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [monsterLife, playerLife] as a second argument to the useEffect Hook.",["106"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'useEffect' is defined but never used.","'nextStageDelay' is assigned a value but never used.","'setNextStageDelay' is assigned a value but never used.","'setStageFloor' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["107"],"no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},"Update the dependencies array to be: [start, monsteerDodgeChance, monsterArmor, monsterLife, playerSpeed, calculateMonsterDodgechance, playerAttack]",{"range":"116","text":"117"},"Update the dependencies array to be: [start, playerDodgeChance, playerArmor, monsterSpeed, calculatePlayerDodgechance, monsterAttack, playerLife]",{"range":"118","text":"119"},"Add dependencies array: [monsterLife, playerLife]",{"range":"120","text":"121"},"Update the dependencies array to be: [history]",{"range":"122","text":"123"},[3958,4000],"[start, monsteerDodgeChance, monsterArmor, monsterLife, playerSpeed, calculateMonsterDodgechance, playerAttack]",[4862,4901],"[start, playerDodgeChance, playerArmor, monsterSpeed, calculatePlayerDodgechance, monsterAttack, playerLife]",[5020,5020],", [monsterLife, playerLife]",[403,405],"[history]"]